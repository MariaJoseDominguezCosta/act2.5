
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DO DOUBLEEQUALS ENDDO ENDWHILE EQUALS ID INT LPAREN NUM PLUS RPAREN SEMICOLON TIMES WHILEprogram : declarations statementsdeclarations : declarations declaration\n                    | declarationdeclaration : INT ID EQUALS NUM SEMICOLONstatements : statements statement\n                | statementstatement : ID EQUALS expression SEMICOLONstatement : DO statements ENDDO WHILE condition ENDWHILEexpression : NUM PLUS expression\n                | ID PLUS expression\n                | expression PLUS NUM\n                | expression PLUS IDexpression : NUM TIMES expression\n                | ID TIMES expression\n                | expression TIMES NUM\n                | expression TIMES IDexpression : LPAREN expression RPARENexpression : NUMexpression : IDcondition : LPAREN ID DOUBLEEQUALS NUM RPAREN'
    
_lr_action_items = {'INT':([0,2,3,6,30,],[4,4,-3,-2,-4,]),'$end':([1,5,7,11,23,42,],[0,-1,-6,-5,-7,-8,]),'ID':([2,3,4,5,6,7,9,11,12,13,18,21,22,23,24,25,26,27,30,41,42,],[8,-3,10,8,-2,-6,8,-5,15,8,15,15,15,-7,34,36,15,15,-4,43,-8,]),'DO':([2,3,5,6,7,9,11,13,23,30,42,],[9,-3,9,-2,-6,9,-5,9,-7,-4,-8,]),'ENDDO':([7,11,13,23,42,],[-6,-5,19,-7,-8,]),'EQUALS':([8,10,],[12,14,]),'NUM':([12,14,18,21,22,24,25,26,27,44,],[17,20,17,17,17,33,35,17,17,45,]),'LPAREN':([12,18,21,22,26,27,29,],[18,18,18,18,18,18,41,]),'PLUS':([15,16,17,28,31,32,33,34,35,36,37,38,39,],[21,24,26,24,24,24,-11,-12,-15,-16,24,24,-17,]),'TIMES':([15,16,17,28,31,32,33,34,35,36,37,38,39,],[22,25,27,25,25,25,-11,-12,-15,-16,25,25,-17,]),'SEMICOLON':([15,16,17,20,31,32,33,34,35,36,37,38,39,],[-19,23,-18,30,-10,-14,-11,-12,-15,-16,-9,-13,-17,]),'RPAREN':([15,17,28,31,32,33,34,35,36,37,38,39,45,],[-19,-18,39,-10,-14,-11,-12,-15,-16,-9,-13,-17,46,]),'WHILE':([19,],[29,]),'ENDWHILE':([40,46,],[42,-20,]),'DOUBLEEQUALS':([43,],[44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,2,],[3,6,]),'statements':([2,9,],[5,13,]),'statement':([2,5,9,13,],[7,11,7,11,]),'expression':([12,18,21,22,26,27,],[16,28,31,32,37,38,]),'condition':([29,],[40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations statements','program',2,'p_program','parser.py',10),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',14),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',15),
  ('declaration -> INT ID EQUALS NUM SEMICOLON','declaration',5,'p_declaration','parser.py',22),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',30),
  ('statements -> statement','statements',1,'p_statements','parser.py',31),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','parser.py',38),
  ('statement -> DO statements ENDDO WHILE condition ENDWHILE','statement',6,'p_statement_do_while','parser.py',47),
  ('expression -> NUM PLUS expression','expression',3,'p_expression_plus','parser.py',51),
  ('expression -> ID PLUS expression','expression',3,'p_expression_plus','parser.py',52),
  ('expression -> expression PLUS NUM','expression',3,'p_expression_plus','parser.py',53),
  ('expression -> expression PLUS ID','expression',3,'p_expression_plus','parser.py',54),
  ('expression -> NUM TIMES expression','expression',3,'p_expression_times','parser.py',60),
  ('expression -> ID TIMES expression','expression',3,'p_expression_times','parser.py',61),
  ('expression -> expression TIMES NUM','expression',3,'p_expression_times','parser.py',62),
  ('expression -> expression TIMES ID','expression',3,'p_expression_times','parser.py',63),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',69),
  ('expression -> NUM','expression',1,'p_expression_num','parser.py',73),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',77),
  ('condition -> LPAREN ID DOUBLEEQUALS NUM RPAREN','condition',5,'p_condition','parser.py',83),
]
